AWSTemplateFormatVersion: '2010-09-09'
Description: 'DAT409 - Aurora PostgreSQL Database with pgvector (v17.5)'

Parameters:
  TemplateName:
    Type: String
    Description: Name prefix for resources
    
  VPC:
    Type: String
    Description: VPC ID
    
  VpcCIDR:
    Type: String
    Description: VPC CIDR block
    
  PrivateSubnets:
    Type: String
    Description: Comma-separated list of private subnet IDs
    
  DBVersion:
    Type: String
    Default: '17'
    Description: PostgreSQL major version
    AllowedValues:
      - '16'
      - '17'
    
  RDSVersionLambdaFunction:
    Type: String
    Description: Lambda function ARN for RDS version lookup

Resources:
  # Enhanced Monitoring Role
  DBMonitoringRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: monitoring.rds.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole
      Tags:
        - Key: Name
          Value: !Sub '${TemplateName}-monitoring-role'

  # Encryption Key
  EncryptionKey:
    Type: AWS::KMS::Key
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Effect: Allow
            Principal:
              Service: rds.amazonaws.com
            Action:
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey'
              - 'kms:CreateGrant'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:ViaService': !Sub 'rds.${AWS::Region}.amazonaws.com'
      Tags:
        - Key: Name
          Value: !Sub '${TemplateName}-kms'

  EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${TemplateName}'
      TargetKeyId: !Ref EncryptionKey

  # Database Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Aurora PostgreSQL subnet group
      SubnetIds: !Split [',', !Ref PrivateSubnets]
      Tags:
        - Key: Name
          Value: !Sub '${TemplateName}-subnet-group'

  # Cluster Parameter Group - Minimal configuration for Aurora PostgreSQL 17
  DBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: Aurora PostgreSQL 17 cluster parameters - minimal
      Family: !Sub 'aurora-postgresql${DBVersion}'
      Parameters:
        shared_preload_libraries: 'pg_stat_statements'
        rds.force_ssl: '0'  # Disable SSL for workshop
      Tags:
        - Key: Name
          Value: !Sub '${TemplateName}-cluster-params'

  # Instance Parameter Group - Use defaults for Aurora PostgreSQL 17
  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Aurora PostgreSQL 17 instance parameters - defaults
      Family: !Sub 'aurora-postgresql${DBVersion}'
      # No custom parameters - use Aurora defaults
      Tags:
        - Key: Name
          Value: !Sub '${TemplateName}-instance-params'

  # Security Group
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Aurora PostgreSQL
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Ref VpcCIDR
          Description: PostgreSQL access from VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${TemplateName}-db-sg'

  # Database Credentials
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${TemplateName}-db-secret'
      Description: Aurora PostgreSQL admin credentials
      GenerateSecretString:
        SecretStringTemplate: '{"username": "workshop_admin"}'
        GenerateStringKey: 'password'
        PasswordLength: 32
        ExcludePunctuation: true
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: Name
          Value: !Sub '${TemplateName}-db-secret'

  # Get appropriate PostgreSQL version
  APGDBVersion:
    Type: Custom::Variable
    Properties:
      ServiceToken: !Ref RDSVersionLambdaFunction
      Engine: aurora-postgresql
      EngineMajorVersion: !Ref DBVersion

  # Aurora Cluster
  DBCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      DBClusterIdentifier: !Sub '${TemplateName}-cluster'
      Engine: aurora-postgresql
      EngineVersion: !GetAtt APGDBVersion.EngineVersion
      EngineMode: provisioned
      Port: 5432
      MasterUsername: !Sub '{{resolve:secretsmanager:${DBSecret}::username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DBSecret}::password}}'
      DatabaseName: workshop_db
      DBClusterParameterGroupName: !Ref DBClusterParameterGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
      StorageType: aurora-iopt1  # I/O Optimized storage
      StorageEncrypted: true
      KmsKeyId: !Ref EncryptionKey
      EnableHttpEndpoint: true  # Enable Data API for MCP
      BackupRetentionPeriod: 1
      PreferredBackupWindow: '03:00-04:00'
      PreferredMaintenanceWindow: 'sun:04:00-sun:05:00'
      DeletionProtection: false  # Workshop environment
      EnableCloudwatchLogsExports:
        - postgresql
      Tags:
        - Key: Name
          Value: !Sub '${TemplateName}-cluster'
        - Key: Environment
          Value: Workshop
        - Key: PostgreSQLVersion
          Value: !GetAtt APGDBVersion.EngineVersion

  # Aurora Writer Instance (r8g.2xlarge)
  DBInstanceWriter:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceIdentifier: !Sub '${TemplateName}-writer-1'
      DBInstanceClass: db.r8g.2xlarge  # 8 vCPUs, 64 GiB RAM
      Engine: aurora-postgresql
      DBParameterGroupName: !Ref DBParameterGroup
      MonitoringInterval: 60
      MonitoringRoleArn: !GetAtt DBMonitoringRole.Arn
      PubliclyAccessible: false
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      PerformanceInsightsKMSKeyId: !Ref EncryptionKey
      PromotionTier: 0  # Priority 0 for writer
      AutoMinorVersionUpgrade: false
      Tags:
        - Key: Name
          Value: !Sub '${TemplateName}-writer-1'
        - Key: Role
          Value: Writer

  # Attach secret to cluster
  SecretTargetAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref DBSecret
      TargetId: !Ref DBCluster
      TargetType: AWS::RDS::DBCluster

  # CloudWatch Log Groups for PostgreSQL logs
  PostgreSQLLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/rds/cluster/${TemplateName}-cluster/postgresql'
      RetentionInDays: 7

Outputs:
  RDSSecrets:
    Description: Database credentials secret ARN
    Value: !Ref DBSecret
    Export:
      Name: !Sub '${AWS::StackName}-secret-arn'
    
  APGCluster:
    Description: Aurora cluster identifier
    Value: !Ref DBCluster
    Export:
      Name: !Sub '${AWS::StackName}-cluster-id'
    
  APGClusterArn:
    Description: Aurora cluster ARN for Data API
    Value: !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DBCluster}'
    Export:
      Name: !Sub '${AWS::StackName}-cluster-arn'
    
  APGClusterEP:
    Description: Aurora cluster endpoint
    Value: !GetAtt DBCluster.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-cluster-endpoint'
      
  APGClusterPort:
    Description: Aurora cluster port
    Value: !GetAtt DBCluster.Endpoint.Port
    Export:
      Name: !Sub '${AWS::StackName}-cluster-port'
      
  APGVersion:
    Description: Aurora PostgreSQL version deployed
    Value: !GetAtt APGDBVersion.EngineVersion
    Export:
      Name: !Sub '${AWS::StackName}-version'